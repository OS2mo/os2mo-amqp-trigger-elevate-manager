# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime, time, timezone, timedelta
import unittest.mock
from unittest.mock import AsyncMock
from uuid import UUID
from uuid import uuid4

import pytest

from elevate_manager.autogenerated_graphql_client.input_types import (
    EngagementUpdateInput,
    ManagerTerminateInput,
    RAValidityInput,
)
from elevate_manager.autogenerated_graphql_client.manager_engagements import (
    ManagerEngagementsManagers,
)
from elevate_manager.autogenerated_graphql_client.org_unit_managers import (
    OrgUnitManagersOrgUnits,
)
from elevate_manager.mo import get_existing_managers
from elevate_manager.mo import get_manager_engagements
from elevate_manager.mo import move_engagement
from elevate_manager.mo import terminate_existing_managers


managers_empty_response = OrgUnitManagersOrgUnits.parse_obj(
    {
        "objects": [
            {
                "current": {
                    "name": "Budget og Planlægning",
                    "uuid": "1f06ed67-aa6e-4bbc-96d9-2f262b9202b5",
                    "managers": [],
                }
            }
        ]
    }
)

managers_response = OrgUnitManagersOrgUnits.parse_obj(
    {
        "objects": [
            {
                "current": {
                    "name": "Budget og Planlægning",
                    "uuid": "1f06ed67-aa6e-4bbc-96d9-2f262b9202b5",
                    "managers": [{"uuid": "5a988dee-109a-4353-95f2-fb414ea8d605"}],
                }
            }
        ]
    }
)

multiple_managers_response = OrgUnitManagersOrgUnits.parse_obj(
    {
        "objects": [
            {
                "current": {
                    "name": "Budget og Planlægning",
                    "uuid": "1f06ed67-aa6e-4bbc-96d9-2f262b9202b5",
                    "managers": [
                        {"uuid": "5a988dee-109a-4353-95f2-fb414ea8d605"},
                        {"uuid": "12388dee-109a-4353-95f2-fb414ea84321"},
                        {"uuid": "98788dee-109a-4353-95f2-fb414ea8d789"},
                    ],
                }
            }
        ]
    }
)

manager_one_engagement_response = ManagerEngagementsManagers.parse_obj(
    {
        "objects": [
            {
                "current": {
                    "employee": [
                        {
                            "engagements": [
                                {"uuid": "fa5e2af6-ae28-4b6b-8895-3b7d39f93d54"}
                            ]
                        }
                    ],
                    "org_unit_uuid": "5e5407f1-12d4-4bfa-a4e4-57b3068b1d6d",
                }
            }
        ]
    }
)


@pytest.mark.asyncio
async def test_get_manager_engagements():
    """Tests if the GraphQL execute coroutine was awaited and that the response data
    is parsed as we expect it in accordance with the autogenerated models."""
    manager_uuid = uuid4()
    mocked_mo_client = AsyncMock()

    mocked_mo_client.manager_engagements.return_value = manager_one_engagement_response

    actual_manager_response = await get_manager_engagements(
        gql_client=mocked_mo_client, manager_uuid=manager_uuid
    )

    assert actual_manager_response == manager_one_engagement_response
    mocked_mo_client.manager_engagements.assert_awaited_once_with(
        [manager_uuid],
    )


@pytest.mark.asyncio
async def test_get_existing_managers():
    """Tests if the GraphQL execute coroutine was awaited and that the response data
    is parsed with the expected model."""
    org_unit_uuid = uuid4()
    mocked_mo_client = AsyncMock()

    mocked_mo_client.org_unit_managers.return_value = managers_response

    actual_managers_response = await get_existing_managers(
        gql_client=mocked_mo_client, org_unit_uuid=org_unit_uuid
    )
    assert actual_managers_response == managers_response
    await mocked_mo_client.org_unit_managers()
    mocked_mo_client.org_unit_managers.assert_awaited()


@pytest.mark.asyncio
async def test_terminate_existing_managers_awaited():
    """
    Tests if the GraphQL execute coroutine was awaited and that the mutation
    was executed with the length of the list of manager uuids.
    """
    # Actual uuid of the manager, that has been assigned this Organisation Unit.
    # This uuid is therefore NOT to be terminated in our function call.
    manager_uuid = UUID("5a988dee-109a-4353-95f2-fb414ea8d605")

    mocked_mo_client = AsyncMock()

    # ACT
    await terminate_existing_managers(
        mocked_mo_client, multiple_managers_response, manager_uuid
    )

    # ASSERT
    # Asserting for the length of the managers list, which should exclude the
    # manager uuid provided in the function call that matches the objects' payload,
    assert len(mocked_mo_client.terminate_manager.call_args_list) == 2
    # The first element in the list should be the call to be terminated.
    assert mocked_mo_client.terminate_manager.call_args_list[0] == unittest.mock.call(
        input=ManagerTerminateInput(
            uuid="12388dee-109a-4353-95f2-fb414ea84321",
            to=datetime.combine(
                datetime.now(), time.min, tzinfo=timezone(timedelta(hours=1))
            ),
        )
    )
    # This should match the second call of termination.
    assert mocked_mo_client.terminate_manager.call_args_list[1] == unittest.mock.call(
        input=ManagerTerminateInput(
            uuid="98788dee-109a-4353-95f2-fb414ea8d789",
            to=datetime.combine(
                datetime.now(), time.min, tzinfo=timezone(timedelta(hours=1))
            ),
        )
    )


@pytest.mark.asyncio
async def test_terminate_existing_manager_not_awaited():
    """
    Test to verify the GraphQL execute coroutine is not awaited and that the mutation
    was executed with only 1 manager uuid.
    """
    # ARRANGE
    manager_uuid = UUID("5a988dee-109a-4353-95f2-fb414ea8d605")
    mocked_mo_client = AsyncMock()

    # ACT
    await terminate_existing_managers(mocked_mo_client, managers_response, manager_uuid)
    # ASSERT
    mocked_mo_client.terminate_manager.assert_not_awaited()  # Awaited 0 times.


@pytest.mark.asyncio
async def test_no_existing_manager_to_terminate_and_not_awaited():
    """
    Test to verify the GraphQL execute coroutine is not awaited and that the mutation
    was executed with only 1 manager uuid.
    """
    # ARRANGE
    manager_uuid = UUID("12388dee-109a-4353-95f2-fb414ea84321")
    mocked_mo_client = AsyncMock()

    # ACT
    await terminate_existing_managers(
        mocked_mo_client, managers_empty_response, manager_uuid
    )

    # ASSERT
    mocked_mo_client.terminate_manager.assert_not_awaited()  # Awaited 0 times.


@pytest.mark.asyncio
async def test_elevate_engagements():
    """Tests if the GraphQL execute coroutine was awaited and that the mutation was executed."""
    # ARRANGE
    org_unit_uuid = uuid4()
    engagement_uuid = uuid4()
    mocked_mo_client = AsyncMock()

    # ACT
    await move_engagement(
        gql_client=mocked_mo_client,
        org_unit_uuid=org_unit_uuid,
        engagement_uuid=engagement_uuid,
    )

    # ASSERT
    mocked_mo_client.move_engagement.assert_awaited_once_with(
        input=EngagementUpdateInput(
            uuid=engagement_uuid,
            validity=RAValidityInput(
                from_=datetime.combine(
                    datetime.now(), time.min, tzinfo=timezone(timedelta(hours=1))
                )
            ),
            org_unit=org_unit_uuid,
        )
    )
