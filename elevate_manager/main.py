# SPDX-FileCopyrightText: 2022 Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import structlog
from fastapi import APIRouter
from fastapi import FastAPI
from fastramqpi.main import FastRAMQPI
from fastramqpi.ramqp.depends import RateLimit
from fastramqpi.ramqp.mo import MORouter
from fastramqpi.ramqp.mo import PayloadType

from . import depends
from .autogenerated_graphql_client import GraphQLClient
from .depends import Settings
from .events import process_manager_event

amqp_router = MORouter()
fastapi_router = APIRouter()

logger = structlog.get_logger(__name__)


@amqp_router.register("org_unit.manager.create")
@amqp_router.register("org_unit.manager.edit")
async def listener(
    gql_client: depends.GraphQLClient, payload: PayloadType, _: RateLimit
) -> None:
    """
    This function listens on changes made to:
    ServiceType - org_unit
    ObjectType - manager
    RequestType - create/edit

    We receive a payload, of type Payload, with content of:
    Manager uuid - payload.object_uuid
    """
    await process_manager_event(gql_client, payload.object_uuid)


def create_app() -> FastAPI:
    settings = Settings()
    fastramqpi = FastRAMQPI(
        application_name="os2mo-manager-elevator",
        settings=settings.fastramqpi,
        graphql_version=22,
        graphql_client_cls=GraphQLClient,
    )
    fastramqpi.add_context(settings=settings)

    app = fastramqpi.get_app()
    mo_amqp_system = fastramqpi.get_amqpsystem()
    mo_amqp_system.router.registry.update(amqp_router.registry)

    return app
