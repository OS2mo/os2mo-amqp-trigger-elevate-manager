# SPDX-FileCopyrightText: 2022 Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from typing import Any

import structlog
from fastapi import APIRouter
from fastapi import FastAPI
from fastramqpi.main import FastRAMQPI  # type: ignore
from fastramqpi.ramqp.mo import MORouter  # type: ignore
from fastramqpi.ramqp.mo import PayloadType  # type: ignore

from .events import process_manager_event
from elevate_manager.autogenerated_graphql_client import GraphQLClient
from elevate_manager.config import Settings

amqp_router = MORouter()
fastapi_router = APIRouter()

logger = structlog.get_logger(__name__)


@amqp_router.register("org_unit.manager.create")
@amqp_router.register("org_unit.manager.edit")
async def listener(context: dict, payload: PayloadType, **kwargs: Any) -> None:
    # NOTE: Removed `sleep_on_error`, is some kind of sleep/ratelimit needed?
    """
    This function listens on changes made to:
    ServiceType - org_unit
    ObjectType - manager
    RequestType - create/edit

    We receive a payload, of type Payload, with content of:
    Manager uuid - payload.object_uuid
    """
    gql_client = context["graphql_session"]
    await process_manager_event(gql_client, payload.object_uuid)


def create_app() -> FastAPI:
    settings = Settings()
    fastramqpi = FastRAMQPI(
        application_name="os2mo-manager-elevator",
        settings=settings.fastramqpi,
        graphql_version=22,
        graphql_client_cls=GraphQLClient,
    )
    fastramqpi.add_context(settings=settings)
