# SPDX-FileCopyrightText: 2022 Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
# Module containing GraphQL functions to interact with MO
import datetime
from uuid import UUID

import structlog
from more_itertools import one

from .autogenerated_graphql_client import GraphQLClient
from .autogenerated_graphql_client.manager_engagements import ManagerEngagementsManagers
from .autogenerated_graphql_client.org_unit_managers import OrgUnitManagersOrgUnits

logger = structlog.get_logger()


async def get_manager_engagements(
    gql_client: GraphQLClient, manager_uuid: UUID
) -> ManagerEngagementsManagers:
    """
    Get the engagement(s) and Organisation Units uuid(s) for the manager.

    Args:
        manager_uuid: UUID of the manager to find potential engagements of
        gql_client: The GraphQL client to perform the query.

    Returns:
        Manager objects consisting of engagements and org units uuids
    """
    return await gql_client.manager_engagements([manager_uuid])


async def get_existing_managers(
    org_unit_uuid: UUID,
    gql_client: GraphQLClient,
) -> OrgUnitManagersOrgUnits:
    """
    Get existing managers of the given OU.

    Args:
        org_unit_uuid: UUID of the organisation unit to find managers of
        gql_client: The GraphQL client to perform the query.

    Returns:
        UUIDs of the org unit managers
    """
    return await gql_client.org_unit_managers([org_unit_uuid])


async def terminate_existing_managers(
    gql_client: GraphQLClient,
    existing_managers: OrgUnitManagersOrgUnits,
    manager_uuid: UUID,
) -> None:
    """
    This function will:
    Terminate any existing managers.

    Args:
        gql_client: The GraphQL client
        existing_managers: The managers already existing in the OU.
        manager_uuid: UUID of the new manager to be elevated.
    """
    # Get previous manager(s) UUID(s)
    previous_managers = one(existing_managers.objects).current.managers
    previous_managers_uuids = [
        m.uuid for m in previous_managers if m.uuid != manager_uuid
    ]
    # Terminate all previous managers
    for uuid in previous_managers_uuids:
        terminate_variables = {
            "input": {
                "uuid": str(uuid),  # UUID of the previous manager to be terminated.
                "to": datetime.date.today().isoformat(),  # Valid until today.
            }
        }
        await gql_client.terminate_manager(**terminate_variables)  # type: ignore


async def move_engagement(
    gql_client: GraphQLClient,
    org_unit_uuid: UUID,
    engagement_uuid: UUID,
):
    """
    The purpose of this function is to move an engagement to whichever
    organisation unit a person has been made a manager of.

    Args:
        gql_client: The GraphQL client
        org_unit_uuid: UUID of the organisation unit to transfer the manager to
        engagement_uuid: UUID of the engagement to be transfered.
    """

    update_engagement_variables = {
        "input": {
            "uuid": str(engagement_uuid),  # UUID of the engagement to be updated.
            "validity": {"from": datetime.date.today().isoformat()},  # From today.
            "org_unit": str(
                org_unit_uuid
            ),  # UUID of the OU wanting to transfer the engagement to.
        }
    }

    await gql_client.move_engagement(**update_engagement_variables)  # type: ignore
