# SPDX-FileCopyrightText: 2022 Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
# Module containing GraphQL functions to interact with MO
from datetime import datetime, time, timezone, timedelta
from uuid import UUID

import structlog
from more_itertools import one

from .autogenerated_graphql_client import GraphQLClient
from .autogenerated_graphql_client.manager_engagements import ManagerEngagementsManagers
from .autogenerated_graphql_client.org_unit_managers import OrgUnitManagersOrgUnits
from elevate_manager.autogenerated_graphql_client.input_types import (
    EngagementUpdateInput,
)
from elevate_manager.autogenerated_graphql_client.input_types import (
    ManagerTerminateInput,
)
from elevate_manager.autogenerated_graphql_client.input_types import RAValidityInput

logger = structlog.get_logger()


async def get_manager_engagements(
    gql_client: GraphQLClient, manager_uuid: UUID
) -> ManagerEngagementsManagers:
    """
    Get the engagement(s) and Organisation Units uuid(s) for the manager.

    Args:
        manager_uuid: UUID of the manager to find potential engagements of
        gql_client: The GraphQL client to perform the query.

    Returns:
        Manager objects consisting of engagements and org units uuids
    """
    return await gql_client.manager_engagements([manager_uuid])


async def get_existing_managers(
    org_unit_uuid: UUID,
    gql_client: GraphQLClient,
) -> OrgUnitManagersOrgUnits:
    """
    Get existing managers of the given OU.

    Args:
        org_unit_uuid: UUID of the organisation unit to find managers of
        gql_client: The GraphQL client to perform the query.

    Returns:
        UUIDs of the org unit managers
    """
    return await gql_client.org_unit_managers([org_unit_uuid])


async def terminate_existing_managers(
    gql_client: GraphQLClient,
    existing_managers: OrgUnitManagersOrgUnits,
    manager_uuid: UUID,
) -> None:
    """
    This function will:
    Terminate any existing managers.

    Args:
        gql_client: The GraphQL client
        existing_managers: The managers already existing in the OU.
        manager_uuid: UUID of the new manager to be elevated.
    """
    # Get previous manager(s) UUID(s)
    previous_managers = one(existing_managers.objects)
    if previous_managers.current is not None:
        previous_managers_uuids = [
            m.uuid for m in previous_managers.current.managers if m.uuid != manager_uuid
        ]
    else:
        previous_managers_uuids = []

    # Terminate all previous managers
    for uuid in previous_managers_uuids:
        await gql_client.terminate_manager(
            input=ManagerTerminateInput(
                uuid=uuid,
                to=datetime.combine(
                    datetime.now(), time.min, tzinfo=timezone(timedelta(hours=1))
                ),
            )
        )


async def move_engagement(
    gql_client: GraphQLClient,
    org_unit_uuid: UUID,
    engagement_uuid: UUID,
):
    """
    The purpose of this function is to move an engagement to whichever
    organisation unit a person has been made a manager of.

    Args:
        gql_client: The GraphQL client
        org_unit_uuid: UUID of the organisation unit to transfer the manager to
        engagement_uuid: UUID of the engagement to be transfered.
    """

    await gql_client.move_engagement(
        input=EngagementUpdateInput(
            uuid=engagement_uuid,
            validity=RAValidityInput(
                from_=datetime.combine(
                    datetime.now(), time.min, tzinfo=timezone(timedelta(hours=1))
                )
            ),
            org_unit=org_unit_uuid,
        )
    )
