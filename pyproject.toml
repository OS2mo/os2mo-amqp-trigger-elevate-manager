# SPDX-FileCopyrightText: 2022 Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0

[tool.poetry]
name = "elevate-manager"
version = "0.0.0"  # versioning handled by conventional commits
description = "OS2mo AMQP trigger receiver that elevates manager engagement according to manager level changes"
authors = ["Magenta ApS <info@magenta.dk>"]
license = "MPL-2.0"
readme = "README.md"
packages = [{include = "elevate_manager"}]
homepage = "https://magenta.dk/"
repository = "https://git.magenta.dk/rammearkitektur/os2mo-triggers/os2mo-amqp-trigger-elevate-manager"
keywords = ["os2mo", "amqp"]

[tool.poetry.dependencies]
python = "^3.11"
structlog = "^24"
pydantic = "^1.10.4"
more-itertools = "^9.0.0"
httpx = "^0.27.2"
websockets = "^13.0.1" # for ariadne
uvicorn = "^0.23"
fastramqpi = "^10"
pytest-cov = "^4.0.0"
gql = "^3.4.0"
click = "^8.1.3"
pytest-asyncio = "^0.21.0"
pytest-split = "^0.8.1"

[tool.poetry.group.pre-commit.dependencies]
pre-commit = "^4"
ruff = "^0.9"
mypy = "^1"
pyupgrade = "^3"

[tool.poetry.group.dev.dependencies]
ariadne-codegen = "^0.7"

[tool.mypy]
plugins = "pydantic.mypy"

[tool.ariadne-codegen]
# Ideally, the GraphQL client is generated as part of the build process and
# never committed to git. Unfortunately, most of our tools and CI analyses the
# project directly as it is in Git. In the future - when the CI templates
# operate on the built container image - only the definition of the schema and
# queries should be checked in.
#
# The default package name is `graphql_client`. Make it more obvious that the
# files are not to be modified manually.
target_package_name = "autogenerated_graphql_client"
target_package_path = "elevate_manager/"
client_name = "GraphQLClient"
schema_path = "schema.graphql"  # curl -O http://localhost:5000/graphql/v22/schema.graphql
queries_path = "queries.graphql"
include_all_inputs = false
include_all_enums = false
plugins = [
    # Return values directly when only a single top field is requested
    "ariadne_codegen.contrib.shorter_results.ShorterResultsPlugin",
]
[tool.ariadne-codegen.scalars.DateTime]
type = "datetime.datetime"
parse = "fastramqpi.ariadne.parse_graphql_datetime"
[tool.ariadne-codegen.scalars.UUID]
type = "uuid.UUID"


[tool.pytest.ini_options]
asyncio_mode="auto"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
